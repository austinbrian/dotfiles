set nocursorline " don't highlight current line

" keyboard shortcuts
inoremap jj <ESC>

" highlight search
"set hlsearch
"nmap <leader>hl :let @/ = ""<CR>

" gui settings
" if (&t_Co == 256 || has('gui_running'))
"   if ($TERM_PROGRAM == 'iTerm.app')
"     colorscheme solarized
"   else
"     colorscheme desert
"   endif
" endif

call togglebg#map("<F5>")

" Disambiguate ,a & ,t from the Align plugin, making them fast again.
"
" This section is here to prevent AlignMaps from adding a bunch of mappings
" that interfere with the very-common ,a and ,t mappings. This will get run
" at every startup to remove the AlignMaps for the *next* vim startup.
"
" If you do want the AlignMaps mappings, remove this section, remove
" ~/.vim/bundle/Align, and re-run rake in maximum-awesome.
function! s:RemoveConflictingAlignMaps()
  if exists("g:loaded_AlignMapsPlugin")
    AlignMapsClean
  endif
endfunction
command! -nargs=0 RemoveConflictingAlignMaps call s:RemoveConflictingAlignMaps()
silent! autocmd VimEnter * RemoveConflictingAlignMaps

" Other stuff
" add proper Pep8 indentation for python files
au BufRead,BufNewFile *py,*pyw,*.c,*.h set tabstop=4

"spaces for indents
au BufRead,BufNewFile *.py,*pyw set shiftwidth=4 softtabstop=4
  " for additional filetypes
au BufNewFile,BufRead *.js,*.html,*.css setlocal shiftwidth=2 tabstop=2 softtabstop=2

  " flag unnecessary whitespace
highlight BadWhitespace ctermbg=red guibg=darkred
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/
" remove the whitespace with every save
autocmd BufWritePre *.py normal m`:%s/\s\+$//e``


" Vim tabs
map <Leader>n <plug>NERDTreeTabsToggle<CR>

" Show hidden files in NERDTree
let NERDTreeShowHidden=1

let g:ycm_python_binary_path = 'python3'


" set completeopt=menuone,noselect,noinsert
" set shortmess+=c
" inoremap <c-c> <ESC>
" " make it fast
" let ncm2#popup_delay = 5
" let ncm2#complete_length = [[1, 1]]
" " Use new fuzzy based matches
" let g:ncm2#matcher = 'substrfuzzy'

" Save bash_profile to be what runs when vim opens
" set shell=/bin/bash\ --rcfile\ ~/.bash_profile
let $BASH_ENV  = "~/.bash_profile"

"python with virtualenv support

" import sys
" if 'VIRTUAL_ENV' in os.environ:
"   project_base_dir = os.environ['VIRTUAL_ENV']
"   activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
"   execfile(activate_this, dict(__file__=activate_this))
" EOF

" let g:airline_solarized_bg='dark'

set pyxversion=0

let g:python_highlight_all=1

let g:black_virtualenv='~/.vim/black'

" Turn on autoformatting with every save
au BufWritePre * :Autoformat

" But we don't want to allow the retabbing and trailing whitespace since
" that's already taken care of
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 0


" run the current buffer in python with F9 key
autocmd FileType python map <buffer> <F9> :w<CR>:exec '!python3' shellescape(@%, 1)<CR>
autocmd FileType python imap <buffer> <F9> <esc>:w<CR>:exec '!python3' shellescape(@%, 1)<CR>


" set airline theme
let g:airline_theme='solarized'
let g:airline_solarized_bg='dark'


" I like it when vim wraps the lines in .md files
set linebreak
