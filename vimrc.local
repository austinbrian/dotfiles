set nocursorline " don't highlight current line

" keyboard shortcuts
inoremap jj <ESC>

" highlight search
"set hlsearch
"nmap <leader>hl :let @/ = ""<CR>

" gui settings
" if (&t_Co == 256 || has('gui_running'))
"   if ($TERM_PROGRAM == 'iTerm.app')
"     colorscheme solarized
"   else
"     colorscheme desert
"   endif
" endif

" call togglebg#map("<F5>")

" Disambiguate ,a & ,t from the Align plugin, making them fast again.
"
" This section is here to prevent AlignMaps from adding a bunch of mappings
" that interfere with the very-common ,a and ,t mappings. This will get run
" at every startup to remove the AlignMaps for the *next* vim startup.
"
" If you do want the AlignMaps mappings, remove this section, remove
" ~/.vim/bundle/Align, and re-run rake in maximum-awesome.
function! s:RemoveConflictingAlignMaps()
  if exists("g:loaded_AlignMapsPlugin")
    AlignMapsClean
  endif
endfunction
command! -nargs=0 RemoveConflictingAlignMaps call s:RemoveConflictingAlignMaps()
silent! autocmd VimEnter * RemoveConflictingAlignMaps

" Other stuff
" add proper Pep8 indentation for python files
au BufRead,BufNewFile *py,*pyw,*.c,*.h set tabstop=4

"spaces for indents
au BufRead,BufNewFile *.py,*pyw set shiftwidth=4 softtabstop=4
  " for additional filetypes
au BufNewFile,BufRead *.js,*.html,*.css setlocal shiftwidth=2 tabstop=2 softtabstop=2

  " flag unnecessary whitespace
highlight BadWhitespace ctermbg=red guibg=darkred
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/
" remove the whitespace with every save
autocmd BufWritePre *.py normal m`:%s/\s\+$//e``

" Ali: to indent json files on save
" autocmd FileType json autocmd BufWritePre <buffer> (%!python -m json.tool 2>/dev/null || echo <buffer>)

" Vim tabs
map <Leader>n <plug>NERDTreeTabsToggle<CR>

" Show hidden files in NERDTree
let NERDTreeShowHidden=1

function! BuildYCM(info)
  if a:info.status == 'installed' || a: info.force
    !./install.sh
  endif
endfunction
Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYCM') }

let g:ycm_python_binary_path = 'python3'
" let g:ycm_path_to_python_interpreter = '/usr/bin/python3'
" let g:ycm_path_to_python_interpreter = '~/.pyenv/versions/3.10.6/bin/python'
" let g:ycm_server_python_interpreter = '~/.pyenv/versions/3.10.6/bin/python'
let g:ycm_path_to_python_interpreter = '/Users/austinbrian/.pyenv/shims/python'


" set completeopt=menuone,noselect,noinsert
" set shortmess+=c
" inoremap <c-c> <ESC>
" " make it fast
" let ncm2#popup_delay = 5
" let ncm2#complete_length = [[1, 1]]
" " Use new fuzzy based matches
" let g:ncm2#matcher = 'substrfuzzy'

" Save bash_profile to be what runs when vim opens
" set shell=/bin/bash\ --rcfile\ ~/.bash_profile
let $BASH_ENV  = "~/.bash_profile"

"python with virtualenv support

" import sys
" if 'VIRTUAL_ENV' in os.environ:
"   project_base_dir = os.environ['VIRTUAL_ENV']
"   activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
"   execfile(activate_this, dict(__file__=activate_this))
" EOF

let g:airline_solarized_bg='dark'

set pyxversion=0

let g:python_highlight_all=1

let g:black_virtualenv='~/.vim/black'

" Turn on autoformatting with every save
au BufWritePre * :Autoformat

"Add isort to autoformatting for python
au BufWritePre *.py :Isort
let g:isort_vim_options = '--profile black'
" let g:vim_isort_map = '<C-i>'
" let g:vim_isort_python_version = '/Users/austinbrian/.pyenv/shims/python'

" But we don't want to allow the retabbing and trailing whitespace since
" that's already taken care of
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 0


" run the current buffer in python with F9 key
autocmd FileType python map <buffer> <F9> :w<CR>:exec '!python3' shellescape(@%, 1)<CR>
autocmd FileType python imap <buffer> <F9> <esc>:w<CR>:exec '!python3' shellescape(@%, 1)<CR>


" set airline theme
let g:airline_theme='solarized'
let g:airline_solarized_bg='dark'


" I like it when vim wraps the lines in .md files
set linebreak

" Remove snipmate deprecation warning
let g:snipMate= { 'snippet_version' : 1 }

" Refresh NERDTree when it's opened
map <C-n> :call NERDTreeToggleAndRefresh()<CR>

function NERDTreeToggleAndRefresh()
    :NERDTreeToggle
      if g:NERDTree.IsOpen()
            :NERDTreeRefreshRoot
              endif
endfunction

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" shortcut for wrapping strings
" set tw=88
noremap <g-w> gqap<CR>

" shortcut to format json nicely
noremap <g-j> :%!jq<CR>


" set color scheme 
" set termguicolors
set background=dark
"colorscheme slate
"
set termguicolors     " enable true colors support
" let ayucolor="light"  " for light version of theme
let ayucolor="mirage" " for mirage version of theme
" let ayucolor="dark"   " for dark version of theme
colorscheme ayu

" Dim inactive windows using 'colorcolumn' setting
" This tends to slow down redrawing, but is very useful.
" Based on https://groups.google.com/d/msg/vim_use/IJU-Vk-QLJE/xz4hjPjCRBUJ
" XXX: this will only work with lines containing text (i.e. not '~')
" from 
" if exists('+colorcolumn')
"   function! s:DimInactiveWindows()
"     for i in range(1, tabpagewinnr(tabpagenr(), '$'))
"       let l:range = ""
"       if i != winnr()
"         if &wrap
"          " HACK: when wrapping lines is enabled, we use the maximum number
"          " of columns getting highlighted. This might get calculated by
"          " looking for the longest visible line and using a multiple of
"          " winwidth().
"          let l:width=256 " max
"         else
"          let l:width=winwidth(i)
"         endif
"         let l:range = join(range(1, l:width), ',')
"       endif
"       call setwinvar(i, '&colorcolumn', l:range)
"     endfor
"   endfunction
"   augroup DimInactiveWindows
"     au!
"     au WinEnter * call s:DimInactiveWindows()
"     au WinEnter * set cursorline
"     au WinLeave * set nocursorline
"   augroup END
" endif

" Github Copilot settings
let g:copilot_filetypes = {
      \ 'gitcommit':v:true,
      \ 'markdown':v:true,
      \ 'python':v:true,
      \ 'javascript':v:true,
      \ 'typescript':v:true,
      \ 'yaml':v:true,
      \ 'json':v:true,
      \ }   
""
" disable copilot for large files
 autocmd BufReadPre *
     \ let f=getfsize(expand("<afile>"))
     \ | if f > 100000 || f == -2
     \ | let b:copilot_enabled = v:false
     \ | endif
